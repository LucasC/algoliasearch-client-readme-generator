### Download Algoliasearch from `bower`:

[Bower](http://bower.io/) works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff youâ€™re looking for.

```sh
$ bower install algoliasearch
```

### Download Algoliasearch from the `jsDelivr` CDN:

[jsDelivr](https://hacks.mozilla.org/2014/03/jsdelivr-the-advanced-open-source-public-cdn/) can offer a performance benefit by hosting `algoliasearch` on servers spread across the globe. This also offers an advantage that if the visitor to your webpage has already downloaded a copy of `algoliasearch` from jsDelivr, it won't have to be re-downloaded.

##### Default - Vanilla HTTP requests (`XMLHttpRequest()`)

```javascript
<script src="//cdn.jsdelivr.net/algoliasearch/{VERSION}/algoliasearch.min.js"></script>
```

##### jQuery HTTP requests (`$.ajax`)

```javascript
<script src="//cdn.jsdelivr.net/algoliasearch/{VERSION}/algoliasearch.jquery.min.js"></script>
```

##### Angular.js HTTP requests (`$http` and `$q`)

```javascript
<script src="//cdn.jsdelivr.net/algoliasearch/{VERSION}/algoliasearch.angular.min.js"></script>
```

### Download Algoliasearch from `Github`:

Download the [client](https://github.com/algolia/algoliasearch-client-js/archive/master.zip) from Github's archive.

### Setup

 1. Ensure your page is including `algoliasearch.min.js` **OR** `algoliasearch.jquery.min.js` **OR** `algoliasearch.angular.min.js`
 2. Initialize the client with your ApplicationID and your Search-Only API-Key. You can find all of them on [your Algolia account](https://www.algolia.com/licensing).

##### Default

```javascript
<script src="algoliasearch.min.js"></script>
<script>
  var client = new AlgoliaSearch('ApplicationID', 'Search-Only-API-Key');
  // ...
```

##### Using jQuery's HTTP requests (`$.ajax`)

```javascript
<script src="algoliasearch.jquery.min.js"></script>
<script>
  var client = $.algolia.Client('ApplicationID', 'Search-Only-API-Key');
  // ...
```

##### Using Angular.js's HTTP requests (`$http` and `$q`)

If your application is based on Angular.js, you need to use our Angular.js integration instead of the vanilla one to be able to render the hits with Angular.js once the engine answers.

```javascript
<script src="algoliasearch.angular.min.js"></script>
<script>
  angular
    .module('myapp', ['algoliasearch'])
    .controller('SearchCtrl', ['$scope', 'algolia', function($scope, algolia) {
      $scope.query = '';
      $scope.hits = [];
      var client = algolia.Client('ApplicationID', 'Search-Only-API-Key');

      // ...
    }]);
  ...
```
